<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[JAVA中的内部类]]></title>
      <url>%2F2016%2F12%2F26%2FJAVA%E4%B8%AD%E7%9A%84%E5%86%85%E9%83%A8%E7%B1%BB%2F</url>
      <content type="text"><![CDATA[JAVA有四个内部类 非静态内部类 静态内部类 局部内部类 匿名内部类 1.非静态内部类没有使用static修饰，此时内部类属于外部类的一个对象，也就是说创建内部类对象之前应该先创建外部类对象。外部类 out = new 外部类();外部类.内部类 in = out.new 内部类();参考如下代码：class outer{ private String name = &quot;outer&quot;; //非静态内部类 class inner{ private String name = &quot;inner&quot;; public void test(){ String name = &quot;test&quot;; System.out.println(name);//test System.out.println(this.name);//inner System.out.println(new outer().name);//outer System.out.println(outer.this.name); System.out.println(&quot;\n&quot;); } } public void show(){ //this.test(); new inner().test(); } } public class InnerDemo { public static void main(String[] args) { new outer().show(); //想在外部类之外访问内部类 //new outer().new inner().test(); outer out = new outer(); outer.inner in = out.new inner(); in.test(); } } 2.静态内部类内部类使用了static修饰，此时内部类属于外部类，也就是说，外部类可以直接调用内部类。 外部类.内部类 in = new 外部类.内部类();参考如下代码：class OOuter{ //静态内部类 //private String name = &quot;CICI&quot;; private static int age = 20; static class IInner{ public void test(){ //静态内部类不能直接访问外部类的非静态成员 System.out.println(&quot;test&quot;); //System.out.println(name); System.out.println(age); } } public void show(){ new IInner().test(); } } public class InnerDemo2 { public static void main(String[] args) { new OOuter().show(); //在外部类访问内部类 new OOuter.IInner().test(); } } 3.局部内部类在方法里创建类,局部内部类不能加任何访问修饰符，因为它只对局部块有效。特别注意：jdk1.8之前，局部内部类只能访问final修饰的局部变量。jdk1.8之后（包括1.8）不需要final修饰，也可以访问。参考如下代码:class LocalClass{ private int age = 17; //局部内部类 public void show(boolean b){ String name = &quot;CICI&quot;; class Local{ public void test(){ System.out.println(b +&quot;&quot; +age + &quot;---&gt;&quot; + name); } } new Local().test(); } } public class LocalClassDemo { public static void main(String[] args) { // TODO Auto-generated method stub new LocalClass().show(false);; } } *4.匿名内部类这是局部内部类的一个特殊，没有名字的局部内部类，只能使用一次。不能是抽象类，没有构造方法。声明和构造匿名内部类的一般格式如下：new 父类(参数){ /* 覆写父类的方法 */ } new 接口(){ /* 覆写接口的方法 */ } 一旦一个方法需要一个对象的时候，而该对象有父类或接口的时候，就可以使用，但只能使用一次。参考如下代码:interface IUSB{ void run(); } class MouseUSBImpl implements IUSB{ public void run(){ System.out.println(&quot;鼠标&quot;); }; } class PC{ public void plugIn(IUSB usb){ usb.run(); } } public class AnonymityDemo { public static void main(String[] args) { // TODO Auto-generated method stub IUSB usb = new MouseUSBImpl(); PC pc = new PC(); pc.plugIn(usb); //若一个类只使用一次的话，我们可以考虑使用匿名内部类完成 String name = &quot;CICI&quot;; pc.plugIn(new IUSB(){ public void run(){ System.out.println(&quot;HAHA&quot;+name); }; }); } }]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[我的第一篇博客]]></title>
      <url>%2F2016%2F12%2F26%2F%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%2F</url>
      <content type="text"><![CDATA[在经过了几天的折腾后，终于把自己的第一个博客搭建了起来。 欢迎大家常来。]]></content>
    </entry>

    
  
  
</search>
